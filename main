// polab08.cpp : Ten plik zawiera funkcję „main”. W nim rozpoczyna się i kończy wykonywanie programu.
//

#include "pch.h"
#include <string>
#include <vector>
#include <iostream>
#include <sstream>
#include <fstream>
#include <istream>
#include <filesystem>
#include <algorithm>

template<class T>
class Matrix
{
public:
	Matrix(int rows, int columns);
	Matrix(std::string filename);
	void addNumber(T value);
	void changeSelectedCell(int row, int column, T newValue);
	std::string getSelectedCell(int row, int column);
	std::string getRow(int row);
	std::string getColumn(int column);
	std::string getMatrix();
	void writeMatrixToFile(std::string FileName);
	void transposition();
	Matrix<T> addMatrices(Matrix<T> a, Matrix<T> b);
	Matrix<T> subtractMatrices(Matrix<T> a, Matrix<T> b);
	Matrix<T> multiplyMatrixes(Matrix<T>, Matrix<T>);
	Matrix<T> addthem(Matrix<T>, Matrix<T>);
	Matrix<T> subtractThem(Matrix<T>, Matrix<T>);
	Matrix<T> multiplyThem(Matrix<T>, Matrix<T>);
	friend void swap(Matrix& first, Matrix& second)
	{
		using std::swap;
		swap(first.columns, second.columns);
		swap(first.rows, second.rows);
		swap(first.data, second.data);
	}

	friend Matrix operator+(const Matrix& one, const Matrix& two)
	{
		Matrix result(one.rows, one.columns);
		result = result.addMatrices(one, two);
		return result;
	}
	friend Matrix operator-(const Matrix& one, const Matrix& two)
	{
		Matrix result(one.rows, one.columns);
		result = result.subtractMatrices(one, two);
		return result;
	}
	friend Matrix operator*(const Matrix& one, const Matrix& two)
	{
		Matrix result(one.rows, two.columns);
		result = result.multiplyMatrixes(one, two);
		return result;
	}
	friend Matrix operator~(const Matrix& one)
	{
		Matrix resutl = Matrix(one.rows, one.columns);
		resutl = resutl + one;
		resutl.transposition();
		return resutl;
	}
	Matrix& operator=(Matrix source)
	{
		swap(*this, source);
		return *this;
	}
private:
	int rows;
	int columns;
	std::vector<std::vector <double>> data;
};


template<class T>
Matrix<T> Matrix<T>::multiplyMatrixes(Matrix<T> a, Matrix<T> b)
{

	if (a.columns != b.rows)
	{
		throw std::exception("Matrices do not match each other.");
	}

	int arwos = a.rows;
	int acolumns = b.columns;
	Matrix<T> a_matrix(arwos, acolumns);
	std::vector<std::vector <T>> adata;
	for (int i = 0; i < a.rows; i++)
	{
		std::vector <double> dataRow;
		for (int j = 0; j < b.columns; j++)
		{
			double sum = 0;
			for (int k = 0; k < b.rows; ++k)
			{
				sum += a.data[i][k] * b.data[k][j];
			}
			dataRow.push_back(sum);
		}
		adata.push_back(dataRow);
	}
	a_matrix.data = adata;
	a_matrix.rows = arwos;
	a_matrix.columns = acolumns;
	return  a_matrix;
}

template<class T>
 Matrix<T> Matrix<T>::subtractThem(Matrix<T> a, Matrix<T> b)
{
	try
	{
		Matrix subtracting = subtracting.subtractMatrices(a, b);
		return subtracting;
	}
	catch (std::exception& e)
	{
		std::cout << e.what() << std::endl;
	}
}

template<class T>
Matrix<T> Matrix<T>::addthem(Matrix<T> a, Matrix<T> b)
{
	try
	{
		Matrix<T> adding = adding.addMatrices(a, b);
		return adding;
	}
	catch (std::exception& e)
	{
		std::cout << e.what() << std::endl;
	}
}

template<class T>
Matrix<T> Matrix<T>::subtractMatrices(Matrix<T> a, Matrix<T> b)
{
	if (a.rows != b.rows || a.columns != b.columns)
	{
		throw std::exception("Matrices do not match each other.");
	}

	int arwos = a.rows;
	int acolumns = a.columns;
	Matrix<T> a_matrix(arwos, acolumns);
	std::vector<std::vector <T>> adata;
	for (int i = 0; i < arwos; i++)
	{
		std::vector <T> dataRow;
		for (int j = 0; j < acolumns; j++)
		{
			dataRow.push_back(a.data[i][j] - b.data[i][j]);
		}
		adata.push_back(dataRow);
	}
	a_matrix.data = adata;
	a_matrix.rows = arwos;
	a_matrix.columns = acolumns;
	return  a_matrix;
}

template<class T>
Matrix<T> Matrix<T>::addMatrices(Matrix<T> a, Matrix<T> b)
{
	if (a.rows != b.rows || a.columns != b.columns)
	{
		throw std::exception("Matrices do not match each other.");
	}

	int arwos = a.rows;
	int acolumns = a.columns;
	Matrix<T> a_matrix(arwos, acolumns);
	std::vector<std::vector <T>> adata;
	for (int i = 0; i < arwos; i++)
	{
		std::vector <T> dataRow;
		for (int j = 0; j < acolumns; j++)
		{
			dataRow.push_back(a.data[i][j] + b.data[i][j]);
		}
		adata.push_back(dataRow);
	}
	a_matrix.data = adata;
	a_matrix.rows = arwos;
	a_matrix.columns = acolumns;
	return  a_matrix;
}
template<class T>
void Matrix<T>::writeMatrixToFile(std::string fileName)
{
	std::ofstream outputFile(fileName);
	if (!outputFile.is_open())
		throw std::exception("Can't write");
	std::string lineAsString = "";
	std::stringstream ss;
	for (int i = 0; i < this->rows; i++) {
		for (int j = 0; j < this->columns; j++) {
			lineAsString += std::to_string(data[i][j]) + ";";
		}
		outputFile << lineAsString << std::endl;
		lineAsString = "";
	}
}

template<class T>
std::vector<T> convert_string_to_vector(std::string input)
{
	std::vector<T> vecNumbers;
	std::stringstream ss(input);
	std::string indvString;
	char sper = ';';

	while (getline(ss, indvString, sper)) {
		vecNumbers.push_back(stod(indvString));
	}
	return vecNumbers;
}

template<class T>
Matrix<T>::Matrix(std::string filename)
{
	std::vector<std::vector <T>> dataman;
	std::ifstream inputFile(filename);
	if (!inputFile.is_open())
		throw std::exception("No such file");
	bool we_use_string = true;
	if (we_use_string) {
		std::string lineAsString;
		while (!inputFile.eof()) {
			inputFile >> lineAsString;
			dataman.push_back(convert_string_to_vector(lineAsString));
		}
	}
	this->data = dataman;
	this->rows = dataman.size();
	this->columns = dataman[0].size();

}
template<class T>
void Matrix<T>::transposition()
{
	int trows = this->columns;
	int tcolumns = this->rows;
	int a = this->rows - 1;
	std::vector<std::vector <T>> tdata;
	for (int i = 0; i < trows; i++)
	{
		std::vector <T> dataRow;
		for (int j = 0; j < tcolumns; j++)
		{
			dataRow.push_back(0);
		}
		tdata.push_back(dataRow);
	}
	for (int i = 0; i < tcolumns; i++) {
		for (int j = 0; j < trows; j++) {
			tdata[j][a] = data[a][j];
		}
		a--;
	}
	this->rows = trows;
	this->columns = tcolumns;
	data = tdata;
}

template<class T>
std::string Matrix<T>::getRow(int row)
{
	std::stringstream ss;
	for (int i = 0; i < this->columns; ++i)
	{
		std::cout << std::to_string(data[row][i]) + " ";
	}
	return ss.str();
}

template<class T>
std::string Matrix<T>::getColumn(int column)
{
	std::stringstream ss;
	for (int i = 0; i < this->rows; ++i)
	{
		ss << std::to_string(data[i][column]) + "\n";
	}
	return ss.str();
}
template<class T>
std::string Matrix<T>::getSelectedCell(int row, int column)
{
	return std::to_string(data[row][column]);
}

template<class T>
std::string Matrix<T>::getMatrix()
{
	std::stringstream ss;
	for (int i = 0; i < this->rows; i++) {
		for (int j = 0; j < this->columns; j++) {
			ss << std::to_string(data[i][j]) + " ";
		}
		ss << "\n";
	}
	return ss.str();
}

template<class T>
void Matrix<T>::addNumber(T value)
{
	for (int i = 0; i < this->rows; i++) {
		for (int j = 0; j < this->columns; j++) {
			this->data[i][j] += value;
		}
	}
}

template<class T>
void Matrix<T>::changeSelectedCell(int row, int column, T newValue)
{
	data[row][column] = newValue;
}

template<class T>
Matrix<T>::Matrix(int rows, int columns)
{
	this->rows = rows;
	this->columns = columns;
	for (int i = 0; i < rows; i++)
	{
		std::vector <T> dataRow;
		for (int j = 0; j < columns; j++)
		{
			dataRow.push_back(0);
		}
		data.push_back(dataRow);
	}
}



int main()
{	
	Matrix<double> checking = Matrix<double>(5, 5);
	Matrix<double> test = Matrix<double>("test.txt");
	std::cout << test.getMatrix();
	
	getchar();

	return 0;
}
